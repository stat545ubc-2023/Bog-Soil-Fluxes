# Loading required libraries
library(shiny)
library(ggplot2)
library(DT)
library(rsconnect)
library(leaflet)

# Load and prepare dataset
data <- read.csv("sample_data.csv", stringsAsFactors = FALSE)
data$CollectionDate <- as.Date(data$CollectionDate) # Converting CollectionDate to Date type

# Define UI layout
ui <- fluidPage(
  titlePanel("Burns Bog - 2016 Burned Zone Carbon Fluxes Analysis"),
  sidebarLayout(
    sidebarPanel(
      selectInput("ecosystem", "Select Ecosystem Type", choices = unique(data$VegetationType)),
      selectInput("treatment", "Select Treatment", choices = unique(data$Treatments)),
      checkboxGroupInput("selectedEcosystems", "Select Multiple Ecosystem Types", choices = unique(data$VegetationType)),
      checkboxGroupInput("selectedTreatments", "Select Multiple Treatments", choices = unique(data$Treatments)),
      hr(),
      downloadButton("downloadData", "Download Data")
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("FCO2 Time Series", plotOutput("fco2Plot")),
        tabPanel("FCH4 Time Series", plotOutput("fch4Plot")),
        tabPanel("Data Table", DTOutput("dataTable")),
        tabPanel("Summary Statistics", verbatimTextOutput("statsOutput")),
        tabPanel("Map View", leafletOutput("mapOutput")),
        tabPanel("Description", verbatimTextOutput("descriptionText"))
      )
    )
  )
)

# Define server logic
server <- function(input, output) {
  
  # Reactive expression for filtered data
  filteredData <- reactive({
    filter_condition <- data$VegetationType %in% input$selectedEcosystems & data$Treatments %in% input$selectedTreatments
    data[filter_condition, ]
  })
  
  # Plot for FCO2
  output$fco2Plot <- renderPlot({
    ggplot(filteredData(), aes(x = CollectionDate, y = FCO2, group = interaction(VegetationType, Treatments))) +
      geom_line(aes(color = interaction(VegetationType, Treatments)), alpha = 0.3) +
      theme_minimal() +
      labs(title = "FCO2 over Time", y = "FCO2 (µmol/m²/s)") +
      scale_color_discrete(name = "Ecosystem & Treatment")
  })
  
  # Plot for FCH4
  output$fch4Plot <- renderPlot({
    ggplot(filteredData(), aes(x = CollectionDate, y = FCH4, group = interaction(VegetationType, Treatments))) +
      geom_line(aes(color = interaction(VegetationType, Treatments)), alpha = 0.3) +
      theme_minimal() +
      labs(title = "FCH4 over Time", y = "FCH4 (nmol/m²/s)") +
      scale_color_discrete(name = "Ecosystem & Treatment")
  })
  
  # Interactive Data Table
  output$dataTable <- renderDT({
    datatable(filteredData(), options = list(pageLength = 10))
  })
  
  # Summary Statistics
  output$statsOutput <- renderText({
    df <- filteredData()
    if(nrow(df) > 0) {
      paste("Mean FCO2: ", mean(df$FCO2), "\n",
            "Mean FCH4: ", mean(df$FCH4), "\n",
            "Data points: ", nrow(df))
    } else {
      "No data selected"
    }
  })
  
  # Geospatial Mapping
  output$mapOutput <- renderLeaflet({
    leaflet(data) %>%
      addTiles() %>%
      addMarkers(~longitude, ~latitude, popup = ~VegetationType)
  })
  
  # Description text
  output$descriptionText <- renderText({
    paste("This shiny app is used for investigating the impacts of treatments 
    and ecosystem types on CO2 and CH4 fluxes in a bog ecosystem.\n",
          "Study Location: Burns Bog, Delata, BC \n",
          "Ecosystem types:\n",
          "PSLS: Pine Sphagnum Low Shrub;\n",
          "PSTS: Pine Sphagnum Tall Shrub;\n",
          "PSW: Pine Sphagnum Woodland;\n",
          "Treatments:\n",
          "S: Study area with seedlings;\n",
          "R: Study area with seedlings removed.")
  })
  
  # Download Data Button
  output$downloadData <- downloadHandler(
    filename = function() {
      paste("data-", Sys.Date(), ".csv", sep="")
    },
    content = function(file) {
      write.csv(filteredData(), file, row.names = FALSE)
    }
  )
}

# Run the application
shinyApp(ui = ui, server = server)
